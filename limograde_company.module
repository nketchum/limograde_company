<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_preprocess_input().
 */
function limograde_company_preprocess_input(&$variables) {
  if (array_key_exists('#id', $variables['element'])) {
    // Add address line 1 placeholder text.
    if ($variables['element']['#id'] === 'edit-field-location-0-address-address-line1') {
      $variables['element']['#attributes']['placeholder'] = t('1234 Main St');
    }
    // Add address locality placeholder text.
    if ($variables['element']['#id'] === 'edit-field-location-0-address-locality') {
      $variables['element']['#attributes']['placeholder'] = t('Jonesville');
    }
    // Add address postal code placeholder text.
    if ($variables['element']['#id'] === 'edit-field-location-0-address-postal-code') {
      $variables['element']['#attributes']['placeholder'] = t('10001');
    }
  }
}

/**
 * Implements hook_WIDGET_form_alter().
 */
function limograde_company_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  // Make address field not collapsible.
  if (array_key_exists('address', $element)) {
    $element['#collapsible'] = 0;
    $element['#type'] = 'fieldset';
  }
}

/**
 * Implements hook_form_alter().
 */
function limograde_company_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Don't ever show revision elements.
  if (array_key_exists('revision_information', $form)) {
    $form['revision_information']['#access'] = FALSE;
  }
  // Make photos multifiles not collapsible.
  if (array_key_exists('field_photos', $form)) {
    $form['field_photos']['widget']['#type'] = 'fieldset';
  }
}

/**
 * Implements hook_preprocess_node().
 */
function limograde_company_preprocess_node(&$variables) {
  $node = $variables['node'];

  foreach (Element::children($variables['elements']) as $key) {
    if (\Drupal::currentUser()->hasPermission('edit any company content')) {
      $path = \Drupal::service('path.current')->getPath();
      $alias = \Drupal::service('path.alias_manager')->getAliasByPath($path);

      $variables['edit'] = array(
        '#type' => 'markup',
        '#markup' => '<a href="/node/'. $node->id() . '/edit?destination='. $alias .'" class="btn btn-xs btn-default">Edit</a>',
        '#weight' => -10,
      );
    }
  }
}
